from collections import defaultdict
import heapq


class Graph:
    def __init__(self, adjac_lis):
        self.adjac_lis = adjac_lis

    def get_neighbors(self, v):
        return self.adjac_lis[v]

    def heuristic(self, n):
        # Simple heuristic values for demonstration
        H = {
            'A': 7,
            'B': 6,
            'C': 2,
            'D': 0
        }
        return H.get(n, float('inf'))

    def a_star_algorithm(self, start, goal):
        open_set = []
        heapq.heappush(open_set, (0 + self.heuristic(start), start))
        came_from = {}
        g_score = defaultdict(lambda: float('inf'))
        g_score[start] = 0

        while open_set:
            _, current = heapq.heappop(open_set)

            if current == goal:
                path = []
                while current in came_from:
                    path.append(current)
                    current = came_from[current]
                path.append(start)
                path.reverse()
                print("Path found:", path)
                return path

            for neighbor, weight in self.get_neighbors(current):
                tentative_g_score = g_score[current] + weight
                if tentative_g_score < g_score[neighbor]:
                    came_from[neighbor] = current
                    g_score[neighbor] = tentative_g_score
                    f_score = tentative_g_score + self.heuristic(neighbor)
                    heapq.heappush(open_set, (f_score, neighbor))

        print("Path does not exist!")
        return None


# Define the graph with adjacency list
adjac_lis = {
    'A': [('B', 1), ('C', 3), ('D', 7)],
    'B': [('D', 5)],
    'C': [('D', 12)]
}

# Create graph and find path
graph = Graph(adjac_lis)
graph.a_star_algorithm('A', 'D')
